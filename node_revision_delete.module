<?php

/**
 * @file
 * Contains node_revision_delete.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_help().
 */
function node_revision_delete_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help.
    case 'help.page.node_revision_delete':

      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Node Revision Delete module allows you to manage the revisions of the Node according to your choice. It helps you to keep the specific number of revisions for the node. This module provides you the flexibility for applying the revision delete for the specific content type and run it on the specific time.') . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Configuring the module') . '</dt>';
      $output .= '<dd>' . t('You can manage your settings from the @config-page page. For this you need the <em>Administer node revision delete settings</em> permission.', array('@config-page' => Link::fromTextAndUrl('Node Revision Delete Administration Page', Url::fromRoute('node_revision_delete.admin_settings'))->toString())) . '</dd>';
      $output .= '</dl>';
      $output .= '<h3>' . t('Drush commands') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>drush node-revision-delete</dt>';
      $output .= '<dd>' . t('Deletes old node revisions for a given content type.') . '</dd>';
      $output .= '</dl>';

      return $output;

    case 'node_revision_delete.admin_settings':
      $output = '';
      $output .= '<p>' . t("To allow Node Revision Delete to act upon a certain content type, you should navigate to the desired content type's edit page via:") . '</p>';
      $output .= '<p><em>' . t('Administration » Structure » Content types » [Content type name]') . '</em></p>';
      $output .= '<p>' . t("Under the Publishing Options tab, enable 'Create new revision' and 'Limit the amount of revisions for this content type' checkboxes. Change the Maximum number of revisions to keep, if you need to, and finally, save your changes clicking in the Save content type button.") . '</p>';

      return $output;
  }
}

/**
 * Implements hook_preprocess_page().
 */
function node_revision_delete_preprocess_page(&$variables) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  switch ($route_name) {
    // Adding a css file to the Node Revision Delete Administration Page.
    case 'node_revision_delete.admin_settings':
      $variables['#attached']['library'][] = 'node_revision_delete/node_revision_delete';
      break;
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function node_revision_delete_form_node_type_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  $node_revision_delete_track = \Drupal::config('node_revision_delete.settings')->get('node_revision_delete_track');
  $content_type = $form_state->getFormObject()->getEntity()->id();

  if (array_key_exists($content_type, $node_revision_delete_track)) {
    $track = TRUE;
    $number = $node_revision_delete_track[$content_type];
  }
  else {
    $track = FALSE;
    $number = 1;
  }

  $form['workflow']['node_revision_delete_track'] = array(
    '#type' => 'checkbox',
    '#title' => t('Limit the amount of revisions for this content type'),
    '#default_value' => $track,
  );

  $number = $form['workflow']['node_revision_delete_number'] = array(
    '#type' => 'number',
    '#title' => t('Maximum number of revisions to keep'),
    '#description' => t('Oldest revisions will be deleted when the total amount surpases this value. Set it to 1 to remove all revisions.'),
    '#default_value' => $number,
    '#min' => 1,
    '#states' => array(
      // Hide the settings when the cancel notify checkbox is disabled.
      'visible' => array(
        ':input[name="node_revision_delete_track"]' => array('checked' => TRUE),
      ),
    ),
  );

  // If we are creating the content type.
  $form['actions']['save_continue']['#submit'][] = '_node_revision_delete_form_node_type_submit';
  // If we are editing the content type.
  $form['actions']['submit']['#submit'][] = '_node_revision_delete_form_node_type_submit';
}

/**
 * Custom submit handler to save the configuration variables.
 *
 * @param array $form
 *   The form element.
 * @param FormStateInterface $form_state
 *   The form state.
 */
function _node_revision_delete_form_node_type_submit(array &$form, FormStateInterface $form_state) {
  $track = $form_state->getValue('node_revision_delete_track');
  $number = $form_state->getValue('node_revision_delete_number');
  // If we will track the content type.
  if ($track) {
    // Getting the config file.
    $config = \Drupal::service('config.factory')->getEditable('node_revision_delete.settings');
    // Getting the variables with the content types configuration.
    $node_revision_delete_track = $config->get('node_revision_delete_track');
    // Getting the content type machine name.
    $content_type = $form_state->getFormObject()->getEntity()->id();
    // Adding the values in the array.
    $node_revision_delete_track[$content_type] = $number;
    // Saving the values in the configuration.
    $config->set('node_revision_delete_track', $node_revision_delete_track)
      ->save();
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function node_revision_delete_form_node_type_delete_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  $form['actions']['submit']['#submit'][] = '_node_revision_delete_form_node_type_delete';
}

/**
 * Custom submit handler to delete the configuration variables.
 *
 * @param array $form
 *   The form element.
 * @param FormStateInterface $form_state
 *   The form state.
 */
function _node_revision_delete_form_node_type_delete(array &$form, FormStateInterface $form_state) {
  // Getting the config file.
  $config = \Drupal::service('config.factory')->getEditable('node_revision_delete.settings');
  // Getting the variables with the content types configuration.
  $node_revision_delete_track = $config->get('node_revision_delete_track');
  // Getting the content type machine name.
  $content_type = $form_state->getFormObject()->getEntity()->id();
  // Adding the values in the array.
  unset($node_revision_delete_track[$content_type]);
  // Saving the values in the configuration.
  $config->set('node_revision_delete_track', $node_revision_delete_track)
    ->save();
}

/**
 * Helper function to return the list of candidate nodes.
 *
 * @param string $content_type
 *   A content type machine name.
 * @param int $max_revisions
 *   Match nodes with a total amount of revisions higher than this number.
 *
 * @return array
 *   Array of total of nodes with revisions keyed by nids.
 */
function _node_revision_delete_candidates($content_type, $max_revisions) {
  $connection = \Drupal::service('database');
  $result = $connection->query('SELECT n.nid, count(n.nid) as total
                     FROM node n
                     INNER JOIN node_revision r ON r.nid = n.nid
                     WHERE n.type = :content_type
                     GROUP BY n.nid
                     HAVING count(n.nid) > :max_revisions',
                     [
                       ':content_type' => $content_type,
                       ':max_revisions' => $max_revisions,
                     ]);
  return $result->fetchCol();
}
